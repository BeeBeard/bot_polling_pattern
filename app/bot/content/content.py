# –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π –¥–ª—è cmd callback

import os
from typing import Union

from aiogram.types import (
    CallbackQuery,
    WebAppInfo,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    KeyboardButton,
    ReplyKeyboardMarkup
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.bot import BOT
from app.classes import Transform
from config import SETTINGS as S
from app.conn.tables import UserEvent
from app.models.google_model import EventAnswer
from loguru import logger

class Cmd:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∫–æ–º–∞–Ω–¥ –≤ –±–æ—Ç–µ"""
    cmd1 = "cmd1"   # –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã


# –¢–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–æ–∫
class KeyWords:
    """–ö–ª–∞—Å –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ"""

    create_event = "–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ"
    show_events = "–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è"

    delete_event = "–£–¥–∞–ª–∏—Ç—å"
    delete_event_confirm = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ"
    edit_event = "–ò–∑–º–µ–Ω–∏—Ç—å"
    invite_event = "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å"

    back = "–ù–∞–∑–∞–¥"


class Keyboard:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""

    @staticmethod
    def event_menu(user_id: int) -> InlineKeyboardMarkup:  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º

        event_menu = InlineKeyboardBuilder()
        event_menu.button(text=KeyWords.create_event, web_app=WebAppInfo(url=os.path.join(S.CALABRA_FRONT, S.ENDPOINT_CREATE_EVENT, str(user_id))))
        event_menu.button(text=KeyWords.show_events, callback_data=Transform(cmd=Cmd.show_events).str)
        event_menu.adjust(1)
        return event_menu.as_markup()

    @staticmethod
    def event_menu_keyboard(user_id: int) -> ReplyKeyboardMarkup:  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º

        kb = [[
            KeyboardButton(text=KeyWords.create_event, web_app=WebAppInfo(url=os.path.join(S.CALABRA_FRONT, S.ENDPOINT_CREATE_EVENT, str(user_id)))),
            KeyboardButton(text=KeyWords.show_events)
        ]]
        return ReplyKeyboardMarkup(
            keyboard=kb,
            resize_keyboard=True,
        )

    @staticmethod
    def event_manage(uuid: str) -> InlineKeyboardMarkup:  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–µ–º

        event_manage = InlineKeyboardBuilder()
        event_manage.button(text=KeyWords.delete_event, callback_data=Transform(cmd=Cmd.delete_event, value=uuid).str)
        event_manage.button(text=KeyWords.edit_event, web_app=WebAppInfo(

            url=os.path.join(S.CALABRA_FRONT, S.ENDPOINT_SHOW_EVENT, uuid)
        ))
        event_manage.button(text=KeyWords.invite_event, callback_data=Transform(cmd=Cmd.invite_url, value=uuid).str)
        event_manage.adjust(3)
        return event_manage.as_markup()

    @staticmethod
    def confirm_delete_event(event_id: str) -> InlineKeyboardMarkup:
        event_manage = InlineKeyboardBuilder()
        event_manage.button(text=KeyWords.delete_event_confirm, callback_data=Transform(cmd=Cmd.confirm_delete_event, value=event_id).str)
        event_manage.button(text=KeyWords.back, callback_data=Transform(cmd=Cmd.dismiss_delete_event, value=event_id).str)
        event_manage.adjust(1)
        return event_manage.as_markup()

    @staticmethod
    async def edit_as_answered(callback: CallbackQuery) -> str:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–∫ —á—Ç–æ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞–∂–∞—Ç–∞—è –∫–Ω–æ–ø–∫–∞ (callback = empty)
        await callback.answer()

        buttons = []
        button_text = ""

        tform = Transform(callback.data)
        if isinstance(tform.value, int):
            value = tform.value + 1
        else:
            value = 1

        for row in callback.message.reply_markup.inline_keyboard:
            for coll in row:
                if coll.callback_data == callback.data:
                    buttons = [[InlineKeyboardButton(text=coll.text, callback_data=Transform(cmd=Cmd.empty, value=value).str)]]
                    button_text = coll.text
                    break
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

        await BOT.b.edit_message_reply_markup(
            chat_id=callback.message.chat.id, message_id=callback.message.message_id, reply_markup=keyboard)
        return button_text

class BotMessages:

    @staticmethod
    async def prepare_event_text(_model: Union[EventAnswer, UserEvent], is_new:Union[bool, None] = None) -> str:

        # –®–∞–ø–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if is_new is None:
            message = ""
        else:
            message = "üéâ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n" if is_new else "üîî –°–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ\n"

        logger.debug(f"–ú–æ–¥–µ–ª—å:\n\n{_model}")
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã
        try:
            if isinstance(_model, EventAnswer):     # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Å–æ–±—ã—Ç–∏–µ
                start_time = _model.start.dateTime
                end_time = _model.end.dateTime
                attendees = [i.email for i in _model.attendees]

            else:     # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
                start_time = _model.start
                end_time = _model.end
                attendees = _model.attendees.split(",")

        except Exception as e:
            message += f"–î–∞—Ç—ã –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω—ã: {e}"
            return message

        # –¢–µ–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        message += (
            f"üìå <b>{_model.summary}</b>\n"
            f"üìÖ –ù–∞—á–∞–ª–æ: <b>{date_to_format_text(str(start_time), _model.timezone)}</b>\n"
            f"üïí –û–∫–æ–Ω—á–∞–Ω–∏–µ: <b>{date_to_format_text(str(end_time), _model.timezone)}</b>\n"
            f"üìç –ú–µ—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∏: {_model.location}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n<i>{_model.description}</i>\n"
            f"üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä:\n<i>{_model.initiator}</i>"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
        if attendees:

            # –£–¥–∞–ª—è–µ–º email initiator –∏–∑ attendees
            initiator = _model.initiator.lower()
            attendees = list(map(str.lower, attendees))
            attendees = "\n".join([i for i in attendees if i != initiator])  # –û—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –∫—Ä–æ–º–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞

            message += f'\nüë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–µ:\n{attendees}'

        message += (
            f'\n\nüìé <a href="https://calabra.online/show-event/{_model.uuid}">–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ</a>'
        )

        return message

    welcome_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {{}}! –Ø ‚Äî Calabra, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Å–æ–±—ã—Ç–∏—è–º–∏!\n"
        f"‚ú® –ß—Ç–æ —è —É–º–µ—é:\n"
        f"‚Ä¢ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –ª—é–¥–µ–π –Ω–∞ —Å–æ–±—ã—Ç–∏—è, –∫–æ–≥–¥–∞ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ –∏—Ö email\n"
        f"–ö–∞–∫‚ùì: \n"
        f"‚Ä¢ —Å–æ–∑–¥–∞—é —Å–æ–±—ã—Ç–∏–µ –≤ –±–æ—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–∏–≥–ª–∞—à–∞–µ–º—ã–º —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–∞–º–∏ —Å–µ–±—è –¥–æ–±–∞–≤–∏–ª–∏ –∫ —Å–æ–±—ã—Ç–∏—é\n"
        f"–ß—Ç–æ –µ—â—ë —è –º–æ–≥—É‚ùì:\n"
        f"‚Ä¢ –≤–Ω–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–æ–±—ã—Ç–∏–µ –∏ —É–¥–∞–ª—è—Ç—å –µ–≥–æ\n"
        f"–ù–∞–∂–º–∏ ¬´–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ¬ªüëá\n"
    )

    empty_events = f"–ù–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π"
    confirm_delete = f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è?"
    fail_event_delete = f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"
    success_event_delete = f"–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ"

    invite_event_url = (
        f"üìé –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ:\n"
        f"https://calabra.online/show-event/{{}}"
    )


if __name__ == '__main__':
    pass
